{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OAEI,uBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAOlB,UACI,+CACA,uBACIO,KAAM,OACNC,MAAOT,EACPU,SAvBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,c,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIGA,EAAUC,OAJb,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAQF,EAAIE,MACZV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAVxB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKc,UAAU,gDAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,kCAAKA,SCDJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAStB,ECVwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPxB,EAASC,GAAWwB,MAAK,SAAAC,GAEjBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAEGqB,EDTyBK,CAAc1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAGrB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SACKhB,IAGDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEf,qBAAKA,UAAU,YAAf,SAUCH,EAAOJ,KAAI,SAAAC,GAAG,OACP,cAAC,EAAD,eAEQA,GADGA,EAAIC,aEGhBgB,EArCM,WAGjB,MAAqCzC,mBAAS,CAAC,aAA/C,mBAAQ0C,EAAR,KAAoB3C,EAApB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAIA,6BAKQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MCxBnC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.75f0414e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = ( e ) => {\n        setInputValue(e.target.value);\n\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2) {\n            // console.log(e);\n            setCategories( cats => [ inputValue, ...cats] );\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n      \n        <form onSubmit= {handleSubmit }>\n            <h2>Add Category </h2>\n            <input\n                type= \"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n            \n       \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired \n}\n","\n\nexport const getGifs = async( category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=foxibBD0MotDviYOHuN3dZSMXDgAe3zM`;\n    const respuesta = await fetch(url);\n    const {data}  = await respuesta.json();\n\n    const gifs = data.map( img => {\n        return {\n            id : img.id,\n            title : img.title,\n            url : img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n    \n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url} ) => {\n    \n    return (\n        <div className=\"card animate__animated animate__fadeInLeftBig\">\n            <img src= {url} alt= {title}/>\n            <p> {title}</p>\n        </div>\n    )\n}\n","import React  from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\n\nexport const GifGrid = ( {category} ) => {\n\n    // const [count, setCount] = useState(0);\n    // const [images, setImages] = useState([]);\n    // useEffect( ()=> {\n    //     // getGifs(category).then(imgs => {setImages(imgs)});\n    //     getGifs(category).then(setImages);\n    // }, [category]);\n\n    const { data:images, loading} = useFetchGifs( category );\n    \n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__bounce\">\n            {category}\n        </h3>\n        {\n            loading && <p className=\"animate__animated animate__flash\">Loading...</p>\n        }\n        <div className=\"card-grid\">\n        \n        {/* <h2>{count}</h2>\n        <button onClick= {() => setCount(count +1)}></button> */}\n        {/* <ol>\n            {images.map(img => (\n                <li key= {img.id}>{img.title}</li>\n            ))}\n        </ol> */}\n\n        {images.map(img => (\n                <GifGridItem \n                    key = {img.id}\n                    {...img}\n                />\n            ))}\n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category ).then(imgs => {\n            \n                setstate({\n                    data: imgs,\n                    loading: false \n                });\n            \n            \n        });\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport {AddCategory} from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [ categories, setCategories] = useState(['Pokemon '] );\n\n    // const handleAdd = () => {\n    //     // 'HunterXHunter'\n    //     // setCategories( [ ...categories, 'Pokemon'] );\n    //     setCategories( cats => [ ...cats, 'Pokemon'] );\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories = {setCategories}/>\n            <hr></hr>\n\n            {/* <button onClick= { handleAdd }>Agregar</button> */}\n\n            <ol>\n                {\n                    // categories.map( category=> {\n                    //     return <li key={category}> {category } </li>\n                    // })\n                    categories.map(category => (\n                        <GifGrid \n                            key = {category}\n                            category = {category} \n                            /> \n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}